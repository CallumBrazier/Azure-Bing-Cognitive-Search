/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/settingsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Settings. */
var Settings = /** @class */ (function () {
    /**
     * Create a Settings.
     * @param {LUISAuthoringClientContext} client Reference to the service client.
     */
    function Settings(client) {
        this.client = client;
    }
    Settings.prototype.list = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, listOperationSpec, callback);
    };
    Settings.prototype.update = function (appId, versionId, listOfAppVersionSettingObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            listOfAppVersionSettingObject: listOfAppVersionSettingObject,
            options: options
        }, updateOperationSpec, callback);
    };
    return Settings;
}());
export { Settings };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/settings",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AppVersionSettingObject"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/settings",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "listOfAppVersionSettingObject",
        mapper: {
            required: true,
            serializedName: "listOfAppVersionSettingObject",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "AppVersionSettingObject"
                    }
                }
            }
        }
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=settings.js.map