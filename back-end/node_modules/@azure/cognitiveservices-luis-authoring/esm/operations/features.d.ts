import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { LUISAuthoringClientContext } from "../lUISAuthoringClientContext";
/** Class representing a Features. */
export declare class Features {
    private readonly client;
    /**
     * Create a Features.
     * @param {LUISAuthoringClientContext} client Reference to the service client.
     */
    constructor(client: LUISAuthoringClientContext);
    /**
     * Creates a new phraselist feature in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistCreateObject A Phraselist object containing Name, comma-separated Phrases and
     * the isExchangeable boolean. Default value for isExchangeable is true.
     * @param [options] The optional parameters
     * @returns Promise<Models.FeaturesAddPhraseListResponse>
     */
    addPhraseList(appId: string, versionId: string, phraselistCreateObject: Models.PhraselistCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.FeaturesAddPhraseListResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistCreateObject A Phraselist object containing Name, comma-separated Phrases and
     * the isExchangeable boolean. Default value for isExchangeable is true.
     * @param callback The callback
     */
    addPhraseList(appId: string, versionId: string, phraselistCreateObject: Models.PhraselistCreateObject, callback: msRest.ServiceCallback<number>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistCreateObject A Phraselist object containing Name, comma-separated Phrases and
     * the isExchangeable boolean. Default value for isExchangeable is true.
     * @param options The optional parameters
     * @param callback The callback
     */
    addPhraseList(appId: string, versionId: string, phraselistCreateObject: Models.PhraselistCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
    /**
     * Gets all the phraselist features in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.FeaturesListPhraseListsResponse>
     */
    listPhraseLists(appId: string, versionId: string, options?: Models.FeaturesListPhraseListsOptionalParams): Promise<Models.FeaturesListPhraseListsResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    listPhraseLists(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.PhraseListFeatureInfo[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPhraseLists(appId: string, versionId: string, options: Models.FeaturesListPhraseListsOptionalParams, callback: msRest.ServiceCallback<Models.PhraseListFeatureInfo[]>): void;
    /**
     * Gets all the extraction phraselist and pattern features in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.FeaturesListResponse>
     */
    list(appId: string, versionId: string, options?: Models.FeaturesListOptionalParams): Promise<Models.FeaturesListResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    list(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.FeaturesResponseObject>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    list(appId: string, versionId: string, options: Models.FeaturesListOptionalParams, callback: msRest.ServiceCallback<Models.FeaturesResponseObject>): void;
    /**
     * Gets phraselist feature info in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be retrieved.
     * @param [options] The optional parameters
     * @returns Promise<Models.FeaturesGetPhraseListResponse>
     */
    getPhraseList(appId: string, versionId: string, phraselistId: number, options?: msRest.RequestOptionsBase): Promise<Models.FeaturesGetPhraseListResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be retrieved.
     * @param callback The callback
     */
    getPhraseList(appId: string, versionId: string, phraselistId: number, callback: msRest.ServiceCallback<Models.PhraseListFeatureInfo>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be retrieved.
     * @param options The optional parameters
     * @param callback The callback
     */
    getPhraseList(appId: string, versionId: string, phraselistId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PhraseListFeatureInfo>): void;
    /**
     * Updates the phrases, the state and the name of the phraselist feature in a version of the
     * application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be updated.
     * @param [options] The optional parameters
     * @returns Promise<Models.FeaturesUpdatePhraseListResponse>
     */
    updatePhraseList(appId: string, versionId: string, phraselistId: number, options?: Models.FeaturesUpdatePhraseListOptionalParams): Promise<Models.FeaturesUpdatePhraseListResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be updated.
     * @param callback The callback
     */
    updatePhraseList(appId: string, versionId: string, phraselistId: number, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be updated.
     * @param options The optional parameters
     * @param callback The callback
     */
    updatePhraseList(appId: string, versionId: string, phraselistId: number, options: Models.FeaturesUpdatePhraseListOptionalParams, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Deletes a phraselist feature from a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be deleted.
     * @param [options] The optional parameters
     * @returns Promise<Models.FeaturesDeletePhraseListResponse>
     */
    deletePhraseList(appId: string, versionId: string, phraselistId: number, options?: msRest.RequestOptionsBase): Promise<Models.FeaturesDeletePhraseListResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be deleted.
     * @param callback The callback
     */
    deletePhraseList(appId: string, versionId: string, phraselistId: number, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param phraselistId The ID of the feature to be deleted.
     * @param options The optional parameters
     * @param callback The callback
     */
    deletePhraseList(appId: string, versionId: string, phraselistId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Adds a new feature relation to be used by the intent in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param featureRelationCreateObject A Feature relation information object.
     * @param [options] The optional parameters
     * @returns Promise<Models.FeaturesAddIntentFeatureResponse>
     */
    addIntentFeature(appId: string, versionId: string, intentId: string, featureRelationCreateObject: Models.ModelFeatureInformation, options?: msRest.RequestOptionsBase): Promise<Models.FeaturesAddIntentFeatureResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param featureRelationCreateObject A Feature relation information object.
     * @param callback The callback
     */
    addIntentFeature(appId: string, versionId: string, intentId: string, featureRelationCreateObject: Models.ModelFeatureInformation, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param featureRelationCreateObject A Feature relation information object.
     * @param options The optional parameters
     * @param callback The callback
     */
    addIntentFeature(appId: string, versionId: string, intentId: string, featureRelationCreateObject: Models.ModelFeatureInformation, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Adds a new feature relation to be used by the entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param featureRelationCreateObject A Feature relation information object.
     * @param [options] The optional parameters
     * @returns Promise<Models.FeaturesAddEntityFeatureResponse>
     */
    addEntityFeature(appId: string, versionId: string, entityId: string, featureRelationCreateObject: Models.ModelFeatureInformation, options?: msRest.RequestOptionsBase): Promise<Models.FeaturesAddEntityFeatureResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param featureRelationCreateObject A Feature relation information object.
     * @param callback The callback
     */
    addEntityFeature(appId: string, versionId: string, entityId: string, featureRelationCreateObject: Models.ModelFeatureInformation, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param featureRelationCreateObject A Feature relation information object.
     * @param options The optional parameters
     * @param callback The callback
     */
    addEntityFeature(appId: string, versionId: string, entityId: string, featureRelationCreateObject: Models.ModelFeatureInformation, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
}
//# sourceMappingURL=features.d.ts.map