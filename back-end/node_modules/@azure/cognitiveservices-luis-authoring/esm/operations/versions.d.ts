import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { LUISAuthoringClientContext } from "../lUISAuthoringClientContext";
/** Class representing a Versions. */
export declare class Versions {
    private readonly client;
    /**
     * Create a Versions.
     * @param {LUISAuthoringClientContext} client Reference to the service client.
     */
    constructor(client: LUISAuthoringClientContext);
    /**
     * Creates a new version from the selected version.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param versionCloneObject A model containing the new version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.VersionsCloneResponse>
     */
    clone(appId: string, versionId: string, versionCloneObject: Models.TaskUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.VersionsCloneResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param versionCloneObject A model containing the new version ID.
     * @param callback The callback
     */
    clone(appId: string, versionId: string, versionCloneObject: Models.TaskUpdateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param versionCloneObject A model containing the new version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    clone(appId: string, versionId: string, versionCloneObject: Models.TaskUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Gets a list of versions for this application ID.
     * @param appId The application ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.VersionsListResponse>
     */
    list(appId: string, options?: Models.VersionsListOptionalParams): Promise<Models.VersionsListResponse>;
    /**
     * @param appId The application ID.
     * @param callback The callback
     */
    list(appId: string, callback: msRest.ServiceCallback<Models.VersionInfo[]>): void;
    /**
     * @param appId The application ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    list(appId: string, options: Models.VersionsListOptionalParams, callback: msRest.ServiceCallback<Models.VersionInfo[]>): void;
    /**
     * Gets the version information such as date created, last modified date, endpoint URL, count of
     * intents and entities, training and publishing status.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.VersionsGetResponse>
     */
    get(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.VersionsGetResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    get(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.VersionInfo>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VersionInfo>): void;
    /**
     * Updates the name or description of the application version.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param versionUpdateObject A model containing Name and Description of the application.
     * @param [options] The optional parameters
     * @returns Promise<Models.VersionsUpdateResponse>
     */
    update(appId: string, versionId: string, versionUpdateObject: Models.TaskUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.VersionsUpdateResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param versionUpdateObject A model containing Name and Description of the application.
     * @param callback The callback
     */
    update(appId: string, versionId: string, versionUpdateObject: Models.TaskUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param versionUpdateObject A model containing Name and Description of the application.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(appId: string, versionId: string, versionUpdateObject: Models.TaskUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Deletes an application version.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.VersionsDeleteMethodResponse>
     */
    deleteMethod(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.VersionsDeleteMethodResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    deleteMethod(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Exports a LUIS application to JSON format.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.VersionsExportMethodResponse>
     */
    exportMethod(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.VersionsExportMethodResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    exportMethod(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.LuisApp>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    exportMethod(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LuisApp>): void;
    /**
     * Imports a new version into a LUIS application.
     * @param appId The application ID.
     * @param luisApp A LUIS application structure.
     * @param [options] The optional parameters
     * @returns Promise<Models.VersionsImportMethodResponse>
     */
    importMethod(appId: string, luisApp: Models.LuisApp, options?: Models.VersionsImportMethodOptionalParams): Promise<Models.VersionsImportMethodResponse>;
    /**
     * @param appId The application ID.
     * @param luisApp A LUIS application structure.
     * @param callback The callback
     */
    importMethod(appId: string, luisApp: Models.LuisApp, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param luisApp A LUIS application structure.
     * @param options The optional parameters
     * @param callback The callback
     */
    importMethod(appId: string, luisApp: Models.LuisApp, options: Models.VersionsImportMethodOptionalParams, callback: msRest.ServiceCallback<string>): void;
    /**
     * Deleted an unlabelled utterance in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param utterance The utterance text to delete.
     * @param [options] The optional parameters
     * @returns Promise<Models.VersionsDeleteUnlabelledUtteranceResponse>
     */
    deleteUnlabelledUtterance(appId: string, versionId: string, utterance: string, options?: msRest.RequestOptionsBase): Promise<Models.VersionsDeleteUnlabelledUtteranceResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param utterance The utterance text to delete.
     * @param callback The callback
     */
    deleteUnlabelledUtterance(appId: string, versionId: string, utterance: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param utterance The utterance text to delete.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteUnlabelledUtterance(appId: string, versionId: string, utterance: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Imports a new version into a LUIS application.
     * @param appId The application ID.
     * @param luisAppV2 A LUIS application structure.
     * @param [options] The optional parameters
     * @returns Promise<Models.VersionsImportV2AppResponse>
     */
    importV2App(appId: string, luisAppV2: Models.LuisAppV2, options?: Models.VersionsImportV2AppOptionalParams): Promise<Models.VersionsImportV2AppResponse>;
    /**
     * @param appId The application ID.
     * @param luisAppV2 A LUIS application structure.
     * @param callback The callback
     */
    importV2App(appId: string, luisAppV2: Models.LuisAppV2, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param luisAppV2 A LUIS application structure.
     * @param options The optional parameters
     * @param callback The callback
     */
    importV2App(appId: string, luisAppV2: Models.LuisAppV2, options: Models.VersionsImportV2AppOptionalParams, callback: msRest.ServiceCallback<string>): void;
    /**
     * Imports a new version into a LUIS application.
     * @param appId The application ID.
     * @param luisAppLu An LU representing the LUIS application structure.
     * @param [options] The optional parameters
     * @returns Promise<Models.VersionsImportLuFormatResponse>
     */
    importLuFormat(appId: string, luisAppLu: string, options?: Models.VersionsImportLuFormatOptionalParams): Promise<Models.VersionsImportLuFormatResponse>;
    /**
     * @param appId The application ID.
     * @param luisAppLu An LU representing the LUIS application structure.
     * @param callback The callback
     */
    importLuFormat(appId: string, luisAppLu: string, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param luisAppLu An LU representing the LUIS application structure.
     * @param options The optional parameters
     * @param callback The callback
     */
    importLuFormat(appId: string, luisAppLu: string, options: Models.VersionsImportLuFormatOptionalParams, callback: msRest.ServiceCallback<string>): void;
    /**
     * Exports a LUIS application to text format.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.VersionsExportLuFormatResponse>
     */
    exportLuFormat(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.VersionsExportLuFormatResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    exportLuFormat(appId: string, versionId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    exportLuFormat(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
}
//# sourceMappingURL=versions.d.ts.map