/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/versionsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Versions. */
var Versions = /** @class */ (function () {
    /**
     * Create a Versions.
     * @param {LUISAuthoringClientContext} client Reference to the service client.
     */
    function Versions(client) {
        this.client = client;
    }
    Versions.prototype.clone = function (appId, versionId, versionCloneObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            versionCloneObject: versionCloneObject,
            options: options
        }, cloneOperationSpec, callback);
    };
    Versions.prototype.list = function (appId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            options: options
        }, listOperationSpec, callback);
    };
    Versions.prototype.get = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, getOperationSpec, callback);
    };
    Versions.prototype.update = function (appId, versionId, versionUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            versionUpdateObject: versionUpdateObject,
            options: options
        }, updateOperationSpec, callback);
    };
    Versions.prototype.deleteMethod = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Versions.prototype.exportMethod = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, exportMethodOperationSpec, callback);
    };
    Versions.prototype.importMethod = function (appId, luisApp, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            luisApp: luisApp,
            options: options
        }, importMethodOperationSpec, callback);
    };
    Versions.prototype.deleteUnlabelledUtterance = function (appId, versionId, utterance, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            utterance: utterance,
            options: options
        }, deleteUnlabelledUtteranceOperationSpec, callback);
    };
    Versions.prototype.importV2App = function (appId, luisAppV2, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            luisAppV2: luisAppV2,
            options: options
        }, importV2AppOperationSpec, callback);
    };
    Versions.prototype.importLuFormat = function (appId, luisAppLu, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            luisAppLu: luisAppLu,
            options: options
        }, importLuFormatOperationSpec, callback);
    };
    Versions.prototype.exportLuFormat = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, exportLuFormatOperationSpec, callback);
    };
    return Versions;
}());
export { Versions };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var cloneOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/clone",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "versionCloneObject",
        mapper: __assign(__assign({}, Mappers.TaskUpdateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "String"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VersionInfo"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VersionInfo
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "versionUpdateObject",
        mapper: __assign(__assign({}, Mappers.TaskUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var exportMethodOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/export",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LuisApp
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var importMethodOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/import",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    queryParameters: [
        Parameters.versionId1
    ],
    requestBody: {
        parameterPath: "luisApp",
        mapper: __assign(__assign({}, Mappers.LuisApp), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "String"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteUnlabelledUtteranceOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/suggest",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "utterance",
        mapper: {
            required: true,
            serializedName: "utterance",
            type: {
                name: "String"
            }
        }
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var importV2AppOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/import",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    queryParameters: [
        Parameters.versionId1
    ],
    requestBody: {
        parameterPath: "luisAppV2",
        mapper: __assign(__assign({}, Mappers.LuisAppV2), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "String"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var importLuFormatOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/import",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    queryParameters: [
        Parameters.versionId1
    ],
    requestBody: {
        parameterPath: "luisAppLu",
        mapper: {
            required: true,
            serializedName: "luisAppLu",
            type: {
                name: "String"
            }
        }
    },
    contentType: "text/plain",
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "String"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var exportLuFormatOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/export",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.format
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
//# sourceMappingURL=versions.js.map